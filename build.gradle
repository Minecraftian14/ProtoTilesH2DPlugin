plugins {
    id 'java'
}

ext {
    pack = ['assets']
}

group 'com.mcxiv.plugin'
version '0.1'

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://jitpack.io' }
}

configurations {
    provided
    implementation.extendsFrom(provided)
}

dependencies {
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.kotcrab.vis:vis-ui:$visuiVersion"
    implementation "com.badlogicgames.ashley:ashley:$ashleyVersion"

    implementation "com.esotericsoftware.spine:spine-libgdx:$spineVersion"

    implementation 'net.mountainblade:modular:1.0'

    implementation "games.rednblack.hyperlap2d:common-api:$h2dVersion"
    implementation "games.rednblack.hyperlap2d:runtime-libgdx:$h2dVersion"

    provided 'com.github.Minecraftian14:StraightLines:0.5'
    implementation project(':ProtoTilesPen')
    implementation project(':ProcessingCards')

    testImplementation 'com.github.Minecraftian14:Hyperlap2DPluginTester:v0.2.2'
    testImplementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
//    testImplementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
//    testImplementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

project.ext.assetsDir = new File("assets");
project.ext.protoTilesPenDir = new File("ProtoTilesPen/build/classes/java/main");

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from files(project.assetsDir)
    from files(project.protoTilesPenDir)

    destinationDirectory = file("/build/lib/plugins")

//    doLast {
//        def jarToCopy = archiveFileName.get()
//        copy {
//            from "/build/lib/plugins/$jarToCopy"
//            into "../../GITHUB/HyperLap2D/assets/plugins"
//        }
//    }
}

task sourcesJar(type: Jar, dependsOn: classes) {

    // Add in the project name.
    def projectName = "ProtoTilesEditor"
    // Add in the name of the class with the main method. Set null if no main class.
    def mainClassName = null // TODO: add the main class here
    // Classifying it as sources for jitpack. Other values: [sources/javadoc]
    def classifier = "sources"
    // Name of the jar file. Add `System.currentTimeMillis()` to append current millis.
    def jarName = projectName + "-jar"
    // Assets folders
    def assetsDir = ["assets"]
    // Additional sources folders.
    def extraSourcesDirs = ["ProcessingCards"]
    // Change if you want to place the jar file to another position.
    def buildDestination = "build/lib"
    // Add string values to copy the built jar file at different locations (relative)
    def copyDirs = []

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////// CORE CODE, SUPPOSED TO BE HIDDEN, UNLESS DEBUGGING
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //<editor-fold defaultstate="collapsed" desc="CORE CODE, SUPPOSED TO BE HIDDEN, UNLESS DEBUGGING">

    // Note that jar file name will have version and classifier appended by default
    // Note that "/build/classes/java/main" is appended automatically to extraSourcesDirs


    //

    archiveClassifier.set(classifier)

    for (i in 0..<extraSourcesDirs.size())
        extraSourcesDirs[i] += "/build/classes/java/main"

    from files(assetsDir)
    from files(extraSourcesDirs)

    // Add the files manually
    // from files(sourceSets.main.output.classesDirs)
    // from files(sourceSets.main.output.resourcesDir)
    // Or let a simple command add everything.
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from configurations.provided.asFileTree.files.collect { zipTree(it) }

    manifest {
        if (mainClassName == null) {
            attributes 'Implementation-Title': projectName,
                    'Implementation-Version': project.version
        } else {
            attributes 'Implementation-Title': projectName,
                    'Implementation-Version': project.version,
                    'Main-Class': "$project.group.$mainClassName"
        }
    }

    setArchivesBaseName(jarName)

    destinationDirectory = file(buildDestination)

    doLast {
        def jarToCopy = archiveFileName.get()

        for (path in copyDirs) {
            copy {
                from "/$buildDestination/$jarToCopy"
                into "/$path"
            }
        }
    }

    with jar

    //</editor-fold>

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

// Declaring artifacts for jitpack to recognise
artifacts {
    archives sourcesJar
}

// I dont know what
wrapper {
    gradleVersion = "6.1.1"
    distributionType = Wrapper.DistributionType.ALL
}